{"version":3,"sources":["serviceWorker.js","Reducers/app.js","Reducers/index.js","configureStore.js","Components/NavBar.js","Components/Home.js","Components/Root.js","Components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","defaultState","titles","state","type","payload","meta","error","LOCATION_CHANGE","pathToTitles","pathname","path","push","startsWith","history","composeEnhancers","composeWithDevTools","logger","createLogger","predicate","getState","action","endsWith","NavBar","drawerOpen","toggleDrawer","setState","this","props","classes","drawer","className","toolbar","Divider","List","list","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","AppBar","position","appBar","Toolbar","Typography","title","variant","noWrap","Drawer","anchor","open","Component","connect","app","withStyles","display","marginLeft","width","zIndex","drawerPaper","marginTop","Home","style","height","overflowX","Root","component","withRouter","App","store","theme","createMuiTheme","typography","useNextVariants","palette","light","main","dark","contrastText","secondary","CssBaseline","createHistory","createStore","combineReducers","router","connectRouter","reducers","applyMiddleware","apiMiddleware","thunkMiddleware","routerMiddleware","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2ECdAC,EAAe,CACnBC,OAAQ,CAHO,eAMF,aAA2D,IAA1DC,EAAyD,uDAAjDF,EAAiD,yCAAjCG,EAAiC,EAAjCA,KAAYC,GAAqB,EAA3BC,KAA2B,EAArBD,SAAqB,EAAZE,MAC3D,OAAQH,GACN,KAAKI,IACH,OAAO,eACFL,EADL,CAEED,OAAQO,EAAaJ,EAAQP,SAASY,YAE1C,QACE,OAAOP,IAIb,SAASM,EAAaE,GACpB,IAAMT,EAAS,CAnBA,cAyBf,MALa,cAATS,EACFT,EAAOU,KAAK,YACHD,EAAKE,WAAW,WACzBX,EAAOU,KAAK,QAEPV,ECpBM,ICSAY,EAPTC,EAAmBC,8BAAoB,IAEvCC,EAASC,uBAAa,CAC1BC,UAAW,SAACC,EAAUC,GAAX,OACXA,EAAOjB,KAAKkB,SAAS,YAAcD,EAAOd,S,+QCmCtCgB,E,2MAEJpB,MAAQ,CACNqB,YAAY,G,EAGdC,aAAe,WACX,EAAKC,SAAS,CAACF,YAAa,EAAKrB,MAAMqB,c,wEAGjC,IAAD,EAEqBG,KAAKC,MAAzBC,EAFD,EAECA,QAGFC,GALC,EAEU5B,OAIhB,6BACC,yBAAK6B,UAAWF,EAAQG,UACxB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAWF,EAAQM,MACtB,CAAC,aAAc,UAAW,eAAeC,KAAI,SAACC,EAAMC,GAAP,OAC5C,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KAAwB,eAATL,EAAwB,kBAAC,IAAD,MAAwC,YAATA,EAAqB,kBAAC,IAAD,MAAiD,gBAATA,EAAyB,kBAAC,IAAD,MAA8B,MAC1L,kBAACM,EAAA,EAAD,CAAcC,QAASP,SAI7B,kBAACJ,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACG,CAAC,WAAY,eAAgB,iBAAiBE,KAAI,SAACC,EAAMC,GAAP,OACjD,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KAAwB,aAATL,EAAsB,kBAAC,IAAD,MAA4C,iBAATA,EAAyB,kBAAC,IAAD,MAA+C,kBAATA,EAA2B,kBAAC,IAAD,MAAuB,MACzL,kBAACM,EAAA,EAAD,CAAcC,QAASP,WAO/B,OACE,6BACA,kBAACQ,EAAA,EAAD,CAAQC,SAAS,WAAWf,UAAWF,EAAQkB,QAC7C,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,MACF,kBAACC,EAAA,EAAD,CAAYlB,UAAWF,EAAQqB,MAAOC,QAAQ,KAAKC,QAAM,GAAzD,mBAKD,kBAACC,EAAA,EAAD,CACCtB,UAAWF,EAAQC,OACnBwB,OAAO,OACPH,QAAQ,YACRI,KAAM5B,KAAKxB,MAAMqB,YAElBM,Q,GAvDc0B,aAwENC,gBAJS,SAAC,GAAD,MAA0B,CAChDvD,OADsB,EAAGwD,IAAOxD,UAInBuD,CAAyBE,YA7FzB,CACbT,MAAO,CACLU,QAAS,QACTC,WAAY,IAEd/B,OAAQ,CACNgC,MAAO,IACPhB,SAAU,WACViB,OAAQ,GAEVC,YAAa,CACXF,MAAO,KAETf,OAAQ,CACNgB,OAAQ,IAEV5B,KAAM,CACJ8B,UAAW,KA4EyBN,CAAmBpC,IC9GrD2C,G,8NASF,OACE,yBAAKC,MAAO,CAAEC,OAAQ,OAAQC,UAAW,WACvC,kBAAC,GAAD,W,GAXWb,aA6BJC,eAAQ,KAARA,CAAcS,IC5BvBI,G,8NAaF,OAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO3D,KAAK,IAAI4D,UAAWL,U,GAhBhBV,aA+BJgB,eAAWf,YAAQ,KAARA,CAAca,KCiBzBG,G,iLA/CJ,IAAD,EACmB9C,KAAKC,MAAvBd,EADD,EACCA,QAAS4D,EADV,EACUA,MACVC,EAEJC,YAAe,CACbC,WAAY,CACZC,iBAAiB,GAEnBC,QAAS,CAEPnC,QAAS,CACPoC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAQpB,OAEE,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAD,CAAiB5D,QAASA,GACxB,kBAAC,IAAD,CAAkB6D,MAAOA,GACzB,kBAACU,EAAA,EAAD,MACA,kBAAC,GAAD,a,GArCQ7B,a,SCDZ1C,G,OAAUwE,KACVZ,ILOS5D,EKPcA,GLQ3ByE,sBDVa,SAAAzE,GAAO,OACpB0E,0BAAgB,CACd9B,MACA+B,OAAQC,YAAc5E,KCQtB6E,CAAS7E,GACTC,EACE6E,0BACEC,gBACAC,IACAC,YAAiBjF,GACjBG,MKZR+E,iBAAO,kBAAC,GAAD,CAAKtB,MAAOA,GAAO5D,QAASA,KAAamF,SAASC,eAAe,SRuHlE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ffb5417d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOCATION_CHANGE } from 'connected-react-router'\n\nconst appTitle = 'Hivelytics'\n\nconst defaultState = {\n  titles: [appTitle]\n}\n\nexport default (state = defaultState, { type, meta, payload, error }) => {\n  switch (type) {\n    case LOCATION_CHANGE:\n      return {\n        ...state,\n        titles: pathToTitles(payload.location.pathname)\n      }\n    default:\n      return state\n  }\n}\n\nfunction pathToTitles(path) {\n  const titles = [appTitle]\n  if (path === '/new-list') {\n    titles.push('New List')\n  } else if (path.startsWith('/list/')) {\n    titles.push('List')\n  }\n  return titles\n}\n","import {combineReducers} from 'redux'\nimport {connectRouter} from 'connected-react-router'\n\n//Import multiple reducer configs\n\nimport app from './app'\n\nexport default history => \n  combineReducers({\n    app,\n    router: connectRouter(history)\n  })\n","import {createStore, applyMiddleware} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n\nimport { apiMiddleware } from 'redux-api-middleware'\nimport { routerMiddleware } from 'connected-react-router'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createLogger } from 'redux-logger'\n\nimport reducers from './Reducers'\nconst composeEnhancers = composeWithDevTools({})\n\nconst logger = createLogger({\n  predicate: (getState, action) =>\n  action.type.endsWith('FAILURE') || action.error\n})\n\nexport default history => \n  createStore(\n    reducers(history),\n    composeEnhancers(\n      applyMiddleware(\n        apiMiddleware,\n        thunkMiddleware,\n        routerMiddleware(history),\n        logger\n      )\n    )\n  )\n\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Divider, \n  List, \n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Drawer,\n  ClickAwayListener,\n} from '@material-ui/core'\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined'\nimport InboxIcon from '@material-ui/icons/Inbox'\nimport MailIcon from '@material-ui/icons/Mail'\nimport PeopleOutlineOutlinedIcon from '@material-ui/icons/PeopleOutlineOutlined'\nimport FormatPaintOutlinedIcon from '@material-ui/icons/FormatPaintOutlined';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport HelpOutlineOutlinedIcon from '@material-ui/icons/HelpOutlineOutlined';\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\n\nimport { withStyles } from '@material-ui/core/styles'\n\nconst styles = {\n  title: {\n    display: 'block', \n    marginLeft: 20\n    },\n  drawer: {\n    width: 240,\n    position: 'relative',\n    zIndex: 1,\n  },\n  drawerPaper: {\n    width: 240\n  },\n  appBar: {\n    zIndex: 24\n  },\n  list: {\n    marginTop: 75\n  }\n}\n\nclass NavBar extends Component {\n\n  state = {\n    drawerOpen: true,\n  }\n\n  toggleDrawer = () => {\n      this.setState({drawerOpen: !this.state.drawerOpen})\n    }\n\n  render() {\n\n    const { classes, titles } = this.props\n\n\n    const drawer = (\n     <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List className={classes.list}>\n        {['Properties', 'Tenants', 'Maintenance'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{text === 'Properties' ? <HomeOutlinedIcon /> : null || text === 'Tenants' ? <PeopleOutlineOutlinedIcon /> : null || text === 'Maintenance' ? <FormatPaintOutlinedIcon /> : null}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['Settings', 'How it works', 'Send Feedback'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{text === 'Settings' ? <SettingsOutlinedIcon /> : null || text === 'How it works'? <HelpOutlineOutlinedIcon /> : null || text === 'Send Feedback' ? <SendOutlinedIcon /> : null}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div> \n    );\n\n    return (\n      <div>\n      <AppBar position=\"absolute\" className={classes.appBar}>\n        <Toolbar>\n          <HomeOutlinedIcon />\n        <Typography className={classes.title} variant=\"h6\" noWrap>\n          Hivelytics.io\n        </Typography>\n        </Toolbar>\n        </AppBar>\n       <Drawer \n        className={classes.drawer}\n        anchor=\"left\"\n        variant=\"permanent\"\n        open={this.state.drawerOpen}\n      >\n      {drawer}\n      </Drawer>\n      </div>\n    )\n  }\n}\n\nNavBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  titles: PropTypes.array.isRequired\n}\n\nconst mapStateToProps = ({ app: { titles } }) => ({\n  titles\n})\n\nexport default connect(mapStateToProps)(withStyles(styles)(NavBar))\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport NavBar from './NavBar'\n\n//Import Other compoents here\n\n\n//Import actions functions here\n\nclass Home extends Component {\n  componentDidMount() {\n  //  if (this.props.auth.authenticated) {\n  //    this.props.dispatch(null)\n  //    //check if authenticated\n  //  }\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100%', overflowX: 'hidden' }}>\n        <NavBar />\n      </div>\n    )\n  }\n}\n\nHome.propTypes = {\n  //auth: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  location: PropTypes.object.isRequired\n}\n\n//const mapStateToProps = ({ checklists: { loading }, auth }) => ({\n//  loading,\n//  auth\n//})\n\nexport default connect(null)(Home)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { withRouter, Route, Switch } from 'react-router'\n\n//Import components here from ./Components\n\nimport Home from './Home'\n\n\nclass Root extends Component {\n  componentDidMount() {\n    //Check authentication here??\n  }\n\n  render() {\n //   const { authenticated } = this.props\n\n //   if (typeof authenticated === 'undefined') {\n  //    return(null)\n      //Implement this, return loading component\n  //  }\n\n    return (\n      //Reference imported components  here\n      <Switch>\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n    )\n  }\n}\n\nRoot.propTypes = {\n//  authenticated: PropTypes.bool,\n  dispatch: PropTypes.func.isRequired\n}\n\n//const mapStateToProps = ({ auth: { authenticated } }) => ({\n//  authenticated\n//})\n\nexport default withRouter(connect(null)(Root))\n\n\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles'\nimport {CssBaseline} from '@material-ui/core'\nimport {Provider} from 'react-redux'\nimport {ConnectedRouter} from 'connected-react-router'\n\nimport Root from './Root'\n\nclass App extends Component {\n\n\n  render(){\n    const {history, store} = this.props\n    const theme = \n      \n      createMuiTheme({\n        typography: {\n        useNextVariants: true\n      },\n      palette: {\n        /* https://material.io/tools/color/#!/?view.left=0&view.right=1&primary.color=1A237E&secondary.color=D81B60 */\n        primary: {\n          light: '#534bae',\n          main: '#1a237e',\n          dark: '#000051',\n          contrastText: '#fff'\n        },\n        secondary: {\n          light: '#ff5c8d',\n          main: '#d81b60',\n          dark: '#a00037',\n          contrastText: '#fff'\n        }\n      }\n    })\n\n\n\n\n    return(\n\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          <Root />\n          </MuiThemeProvider>\n        </ConnectedRouter>\n      </Provider>\n    )\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object.isRequired,\n  store: PropTypes.object.isRequired\n}\n\nexport default App\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './configureStore'\nimport App from './Components/App'\nimport createHistory from 'history/createBrowserHistory'\n\nconst history = createHistory()\nconst store = configureStore(history)\n\n\nrender(<App store={store} history={history} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}